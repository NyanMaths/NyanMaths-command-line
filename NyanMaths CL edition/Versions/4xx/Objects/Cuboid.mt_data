class Cuboid:
    __type__ = "Cuboid"
    
    def __init__ (self, length, width = None, height = None):
        if width is None:
            width = length
            height = length

        if _isRealLimit (length) and _isRealLimit (width) and _isRealLimit (height):
            self._length = length
            self._width = width
            self._height = height

        else:
            print ("\n Invalid values : they must be positive non-zero real numbers !\n Initialization of default values...\n Done\n")
            self._length = 1
            self._width = 1
            self._height = 1


    def _getLength (self):
        return self._length

    def _getWidth (self):
        return self._width

    def _getHeight (self):
        return self._height

    def _getEdge (self):
        if self._length == self._width == self._height:
            return self._length

        print ("\n You can't access to this property because length must be equals to width and height !\n")
        raise RuntimeError

    def _getVolume (self):
        return self._length * self._width * self._height

    def _getSurface (self):
        return 2 * (self._length * self._width + self._length * self._height + self._width * self._height)

    def _getDiagonale (self):
        return (self._length * self._length + self._width * self._width + self._height * self._height)**0.5


    def _setLength (self, nLength):
        if _isRealLimit (nLength):
            self._length = nLength

        else:
            print ("\n Invalid new length : it must be a positive non-zero real number !\n")

    def _setWidth (self, nWidth):
        if _isRealLimit (nWidth):
            self._width = nWidth

        else:
            print ("\n Invalid new width : it must be a positive non-zero real number !\n")

    def _setHeight (self, nHeight):
        if _isRealLimit (nHeight):
            self._height = nHeight

        else:
            print ("\n Invalid new height : it must be a positive non-zero real number !\n")

    def _setEdge (self, nEdge):
        if _isRealLimit (nEdge):
            self._length = nEdge
            self._width = nEdge
            self._height = nEdge

        else:
            print ("\n Invalid new edge : it must be a positive non-zero real number !\n")

    def _setVolume (self, nVolume):
        print ("\n Impossible to change it !\n")

    def _setSurface (self, nSurface):
        print ("\n Impossible to change it !\n")

    def _setDiagonale (self, nDiagonale):
        print ("\n Impossible to change it !\n Kill in 2 seconds...")
        sleep (2)
        BSOD ()


    def __getattr__ (self, name):
        print ("\nI'm sorry, there's no attribute named \"{}\" in this object !\n".format (name))

    def __repr__ (self):
        print ("\n Loading resources...")
        system ('Graphics.pyw cuboid {6} {0} {1} {2} {3} {4} {5}'.format (self.length, self.width, self.height, self.volume, self.surface, self.diagonale, _precision_))
        return ''


    def __imul__ (self, n):
        if _isRealLimit (n):
            self._length *= n
            self._width *= n
            self._height *= n

        else:
            print ("\n Invalid coefficient : it must be a positive non-zero real number !\n")

        return self

    def __itruediv__ (self, n):
        if _isRealLimit (n):
            self._length /= n
            self._width /= n
            self._height /= n

        else:
            print ("\n Invalid coefficient : it must be a positive non-zero real number !\n")

        return self

    def __mul__ (self, n):
        if _isRealLimit (n):
            return Cuboid (self._length * n, self._width * n, self._height * n)

        print ("\n Invalid coefficient : it must be a positive non-zero real number !\n")

    def __truediv__ (self, n):
        if _isRealLimit (n):
            return Cuboid (self._length / n, self._width / n, self._height / n)

        print ("\n Invalid coefficient : it must be a positive non-zero real number !\n")

    def __rmul__ (self, n):
        return self * n


    def __eq__ (self, n):
        if type (n) is Cuboid:
            return self.length == n.length and self.width == n.width and self.height == n.height

        print ("\n Invalid operands : they must be two cuboids !\n")

    def __ne__ (self, n):
        if type (n) is Cuboid:
            return self.length != n.length or self.width != n.width or self.height != n.height

        print ("\n Invalid operands : they must be two cuboids !\n")


    length = property (_getLength, _setLength)
    width = property (_getWidth, _setWidth)
    height = property (_getHeight, _setHeight)

    edge = property (_getEdge, _setEdge)

    volume = property (_getVolume, _setVolume)
    surface = property (_getSurface, _setSurface)
    diagonale = property (_getDiagonale, _setDiagonale)